@import: code
@require: itemize
@require: table
@require: proof
@import: stdjareport-tapl
@import: local

document (|
  title = {型システム入門メモ};
  author = {maton};
|) '<
  +chapter?:(18){事例：命令的オブジェクト}<
    +section?:(6){単純なクラス}<
      +practice(|
        is-recommended = true;
        stars = 2;
        has-answer = true;
      |){
        fullref 検査器は使ってません…。
        あと、「${\lambda}」をうまく表示できなかったので、
        代わりに「\code(`\`);」と書いてます。
      }
      +code(
        ```
          decCounterClass =
            \r:CounterRep.
              let super = resetCounterClass r in
                {get   = super.get,
                 inc   = super.inc,
                 reset = super.reset,
                 dec   = \_:Unit. r.x:=pred(!(r.x))};
        ```
      );
      +practice(|
        is-recommended = false;
        stars = 2;
        has-answer = false;
      |){}
      +pn{
        新しい構文形式(${t}を項であるとする)
        \align(
        [
          ${| t \adddef | \ldots    |};
          ${|           | t \with t |};
        ]);
        新しい評価規則(${l, r}をレコードラベル, ${v, w}を値であるとする)
        \enumerate{
          * \eqn(
              ${
                \withapp{\binds{l}{v}{i}{1}{n}}{} \longrightarrow \brace{\binds{l}{v}{i}{1}{n}}
              }
            );
          * \align([
              ${| | 
                  \withapp{
                    \binds{l}{v}{i}{1}{j - 1}, \bind{l}{v}{j}, \binds{l}{v}{k}{j + 1}{n}
                  }{
                    \bind{l}{v'}{j}, \binds{r}{w}{h}{1}{m}
                  }
              |};
              ${| \longrightarrow |
                  \withapp{
                    \binds{l}{v}{i}{1}{j - 1}, \bind{l}{v'}{j}, \binds{l}{v}{k}{j + 1}{n}
                  }{
                    \binds{r}{w}{h}{1}{m}
                  }
              |};
            ]);
          * \align([
              ${| | 
                  \withapp{
                    \binds{l}{v}{i}{1}{n}
                  }{
                    \bind{r}{w}{j}, \binds{r}{w}{h}{1}{m}
                  }
              |};
              ${| \longrightarrow |
                  \withapp{
                    \binds{l}{v}{i}{1}{n}, \bind{r}{w}{j}
                  }{
                    \binds{r}{w}{h}{1}{m}
                  }
              |};
            ]);
          * \eqn(
              ${
                \derive{| t_1 \longrightarrow t'_1 |}
                      {  t_1 \with t_2 \longrightarrow t'_1 \with t_2 }
              }
            );
          * \eqn(
              ${
                \derive{| t_2 \longrightarrow t'_2 |}
                      {  v_1 \with t_2 \longrightarrow v_1 \with t'_2 }
              }
            );
        }
        新しい型付け規則(${T_1 \vee T_2}はp.161で見た合併型)
        \eqn(
          ${ 
            \derive{| \tj{\Gamma}{t_1}{T_1} | \tj{\Gamma}{t_2}{T_2} |}
                   {  \tj{\Gamma}{t_1 \with t_2}{T_1 \vee T_2} } 
          }
        );
      }
      +p{
        評価規則の基本的な考え方は、マージソートにおけるマージに由来している。
        すなわち、withの右辺のレコードを先頭から見ていき、右辺のレコードの先頭要素が
        \enumerate{
          * 空ならば、マージ完了である
          * 左辺のレコードに含まれていれば、オーバーライドする
          * 左辺のレコードに含まれていなければ、左辺に加える
        }
        という操作を、それぞれ１ステップで実行する。
        (4), (5) の評価規則は、withの両辺が値になっていない場合の評価順序を定めている。
      }
    >
    +section{インスタンス変数の付加}<
      +practice(|
        is-recommended = true;
        stars = 2;
        has-answer = true;
      |){
        やはりfullref検査器は使ってません。
      }
      +code(
        ```
          DoubleBackupCounter = 
            {get:Unit->Nat, inc:Unit->Unit,
             reset:Unit->Unit,backup:Unit->Unit,
             reset2:Unit->Unit,backup2:Unit->Unit};

          DoubleBackupCounterRep = 
            {x: Ref Nat, b: Ref Nat, b2: Ref Nat};

          doubleBackupCounterClass =
            \r:DoubleBackupCounterRep.
              let super = backupCounterClass r in
                {get     = super.get,
                 inc     = super.inc,
                 reset   = \_:Unit. r.x:=!(r.b),
                 backup  = \_:Unit. r.b:=!(r.x),
                 reset2  = \_:Unit. r.x:=!(r.b2),
                 backup2 = \_:Unit. r.b2:=!(r.x)};
        ```
      );
      +p{
        このとき型は、
        \listing{
          * \code(`
              doubleBackupCounterClass 
              : DoubleBackupCounterRep -> DoubleBackupCounter`);
        }
        のようになる。
        関数型は反変なので、\code(`doubleBackupCounterClass`);は
        \code(`backupCounterClass`);の部分型になっていない…？
      }
      +p{
        なお、演習 18.6.2. で定めた \code(`with`); 構文を使うと、
        \code(`doubleBackupCounterClass`); は以下のようになる。
      }
      +code(
        ```
          doubleBackupCounterClass =
            \r:DoubleBackupCounterRep.
              let super = backupCounterClass r in
                super with {reset2  = \_:Unit. r.x:=!(r.b2),
                            backup2 = \_:Unit. r.b2:=!(r.x)};
        ```
      );
    >
    +section?:(11){オープンな再帰と評価順序}<
      +practice(|
        is-recommended = true;
        stars = 3;
        has-answer = true;
      |){
        以下、解答では断りなく\code(`with`);構文を用いる。
      }
      +pn{
        (1) \code(`get`);の呼び出しを数えられるようにする。 カウンタは共有で。
      }
      +code(
        ```
          instrCounterClass =
            \r:InstrConterRep.
            \self:Unit -> InstrCounter.
              \_:Unit.
                let super = setCounterClass r self unit in
                  super with 
                  {get = \i:Nat. (r.a:=succ(!(r.a)); super.get i),
                   set = \i:Nat. (r.a:=succ(!(r.a)); super.set i),
                   accesses = \_:Unit. !(r.a)};
        ```
      );
      +pn{
        (2) \code(`reset`);を持つサブクラスを定義。
        \code(`InstrConterRep`);を使いまわす。
        (\code(`ResetInstrCounter`);の型は省略。)
      }
      +code(
        ```
          resetInstrCounterClass =
            \r:InstrConterRep.
            \self:Unit -> ResetInstrCounter.
              \_:Unit.
                let super = instrCounterClass r self unit in
                  super with {reset = \_:Unit. r.x:=1};
        ```
      );
      +pn{
        (3) \code(`backup`);を持つサブクラスを定義。(\code(`BackupInstrCounter`);の型は省略。)
      }
      +code(
        ```
          BackupInstrCounterRep = 
            {x: Ref Nat, a: Ref Nat, b: Ref Nat};

          backupInstrCounterClass =
            \r:BackupInstrConterRep.
            \self:Unit -> BackupInstrCounter.
              \_:Unit.
                let super = instrCounterClass r self unit in
                  super with 
                  {reset = \_:Unit. r.x:=!(r.b),
                   backup = \_:Unit. r.b:=!(r.x)};
        ```
      );
    >
    +section?:(13){要点のまとめ}<
      +practice(|
        is-recommended = false;
        stars = 3;
        has-answer = true;
      |){
        \dfn{オブジェクト同一性}を実現するには、\code(`new`);関数が呼び出される度に
        異なる\dfn{オブジェクトID}をオブジェクトに付与するのが良いだろう。
        オブジェクトIDの表現についてはここでは議論しない
        \footnote{セキュリティを気にしなければ通し番号でいいだろう}。
        あらゆる\code(`new`);関数は、内部にIDを発行するためのストアを持ち、
        \code(`new`);関数を呼び出す度にオブジェクトにIDを付与してストアを更新する。
      }
      +p{
        この機構を実装するには、すべてのクラスがIDのストアとIDの更新メソッドを持つ
        クラスを継承するようにすればよい。
        これはJavaにおける\code(`Object`);クラスに類似するアプローチと言える。
      }
    >
  >
    % +clear-page{}
>